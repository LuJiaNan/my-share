1.组件测试
2.方法测试(验证方法的循环用例)
3.reducer测试
4.saga测试
5.api测试
6.测试覆盖率


.get(index)：返回指定位置的子组件的DOM节点
.at(index)：返回指定位置的子组件
.text()：返回当前组件的文本内容
.html()：返回当前组件的HTML代码形式
.props()：返回根组件的所有属性
.prop(key)：返回根组件的指定属性
.state([key])：返回根组件的状态

三种渲染方式的区别 
https://www.tangshuang.net/4070.html
https://github.com/airbnb/enzyme/issues/465

shallow: defaultProps
mount: 和浏览器上渲染的内容一致

shallow：浅渲染，是对官方的Shallow Renderer的封装。将组件渲染成虚拟DOM对象，只会渲染第一层，子组件将不会被渲染出来，因而效率非常高。不需要DOM环境， 并可以使用jQuery的方式访问组件的信息；**浅渲染**。其作用是仅仅渲染至虚拟节点，不会返回真实的节点，能极大提高测试性能。但是它不适合测试包含子组件、需要测试声明周期的组件。
render：静态渲染，它将React组件渲染成静态的HTML字符串，然后使用Cheerio这个库解析这段字符串，并返回一个Cheerio的实例对象，可以用来分析组件的html结构。
mount：完全渲染，它将组件渲染加载成一个真实的DOM节点，用来测试DOM API的交互和组件的生命周期，用到了jsdom来模拟浏览器环境。

toBe,toEqual,toStrictEqual,equals    equals用法:expect(wrapper.equals(<div className="foo bar" />)).to.equal(true);
日志打印不出来的解决方案： 
1.npm run test /src/modules/.../test.js
2.写几个相同的用例

mock.calls 用法https://www.jianshu.com/p/6f75b48af8b9

wrapper.debug() 可以打印整个组件的HTML-string数据，页面测试时当期望的和收到的结果不匹配时，可以查看比较清晰的html解构来找到问题

const enzymeWrapper = shallow(<Detail {...props}/>,{disableLifecycleMethods: true}) 配置禁用react的componentDidMount这一生命周期，防止测试过程中初始化调用的方法影响测试结果,默认是false


beforeAll,beforeEach,afterAll,afterEach

beforeAll(() => console.log('1 - beforeAll')); 1
afterAll(() => console.log('1 - afterAll')); 12
beforeEach(() => console.log('1 - beforeEach')); 2 6
afterEach(() => console.log('1 - afterEach')); 4 10
test('', () => console.log('1 - test')); 3
describe('Scoped / Nested block', () => {
  beforeAll(() => console.log('2 - beforeAll')); 5
  afterAll(() => console.log('2 - afterAll')); 11
  beforeEach(() => console.log('2 - beforeEach')); 7
  afterEach(() => console.log('2 - afterEach')); 9
  test('', () => console.log('2 - test')); 8
});

// 1 - beforeAll
// 1 - beforeEach
// 1 - test
// 1 - afterEach
// 2 - beforeAll
// 1 - beforeEach
// 2 - beforeEach
// 2 - test
// 2 - afterEach
// 1 - afterEach
// 2 - afterAll
// 1 - afterAll


测试工具: 

https://www.npmjs.com/package/puppeteer
https://www.npmjs.com/package/zombie


mock用例之前先看官方的例子
const mockCallback = jest.fn(x => 42 + x);
forEach([0, 1], mockCallback);

// The mock function is called twice
expect(mockCallback.mock.calls.length).toBe(2);

// The first argument of the first call to the function was 0
expect(mockCallback.mock.calls[0][0]).toBe(0);

// The first argument of the second call to the function was 1
expect(mockCallback.mock.calls[1][0]).toBe(1);

// The return value of the first call to the function was 42
expect(mockCallback.mock.results[0].value).toBe(42);