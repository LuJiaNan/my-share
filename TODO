//IOC (Inversion of Control) 控制反转

https://stackoverflow.com/questions/3058/what-is-inversion-of-control


Separate what-to-do part from when-to-do part.
Ensure that when part knows as little as possible about what part; and vice versa.


Without IoC: You have a laptop computer and you accidentally break the screen. And darn, you find the same model laptop screen is nowhere in the market. So you're stuck.

With IoC: You have a desktop computer and you accidentally break the screen. You find you can just grab almost any desktop monitor from the market, and it works well with your desktop.

Your desktop successfully implements IoC in this case. It accepts a variety type of monitors, while the laptop does not, it needs a specific screen to get fixed.




Inversion of Control, (or IoC), is about getting freedom (You get married, you lost freedom and you are being controlled. You divorced, you have just implemented Inversion of Control. That's what we called, "decoupled". Good computer system discourages some very close relationship.) more flexibility (The kitchen in your office only serves clean tap water, that is your only choice when you want to drink. Your boss implemented Inversion of Control by setting up a new coffee machine. Now you get the flexibility of choosing either tap water or coffee.) and less dependency (Your partner has a job, you don't have a job, you financially depend on your partner, so you are controlled. You find a job, you have implemented Inversion of Control. Good computer system encourages in-dependency.)



https://zhuanlan.zhihu.com/p/33492169
https://www.cnblogs.com/pqjwyn/p/9846292.html(JS DI)
https://www.jianshu.com/p/1c266814b436(Java IOC)
angular inject 介绍
https://www.jianshu.com/p/4b10948d456c(Angular依赖注入介绍)
https://www.jianshu.com/p/21f3f4834418(angular 初认)

https://developer.51cto.com/art/201909/603148.htm

 IoC是什么
Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：

 

●谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。

●为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。




 IoC能做什么（松耦合，方便测试，功能复用，体系结构更灵活）
IoC不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。

其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。

IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。




IoC和DI
DI—Dependency Injection，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。

 

理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：

 

●谁依赖于谁：当然是应用程序依赖于IoC容器；

●为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；

●谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；


●注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。

 

IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。


依赖注入的优点
依赖注入降低了依赖和被依赖类型间的耦合，在修改被依赖的类型实现时，不需要修改依赖类型的实现，同时，对于依赖类型的测试。依赖注入方式，可以将代码耦合性降到最低，而且各个模块拓展不会互相影响，

实现数据访问层，也就是前端你的数据请求层
模块与接口重构，依赖注入背后的一个核心思想是单一功能原则，这意味着这些对象在系统的任何地方都可以重用。
随时增加单元测试，把功能封装到整个对象里面会导致自动测试困难或者不可能。将模块和接口与特定对象隔离，以这种方式重构可以执行更先进的单元测试。


/
import B from ''
class A {
    constructor(){
        this.b = B
    }
    fn(){
        B.fn()
    }
}
A 依赖 B
/
class A {
    constructor(B){
        this.b = B
    }
    fn(){
        this.B.fn()
    }
}
new A(B)
/
B 注入 A

概念 di， ioc 

控制反转这里控制权从使用者本身转移到第三方容器上，而非是转移到被调用者上，这里需要明确不要疑惑。控制反转是一种思想，依赖注入是一种设计模式。


面向对象有五大原则：单一职责、开闭原则、里氏替换、接口分离和依赖反转。依赖反转（Dependency Inversion），实体应该依赖于抽象而不是实现。也就是说高层次模块，不应该依赖于低层次模块，而是应该基于抽象。


一、概念：依赖注入（DI）、控制反转（IOC）、IOC容器
依赖注入（DI）和控制反转（IOC）基本是一个意思，因为说起来谁都离不开谁。
简单来说，类A依赖类B，但A不控制B的创建和销毁，仅使用B，那么B的控制权则交给A之外处理，这叫控制反转（IOC）。
由于A依赖于B，因此在A中必然要使用B的instance，我们可以通过A的构造函数将B的实例注入，比如：

class B { }
class A {
  constructor(b: B) { 
      console.log(b);
  }
}
const b = new B();
// 将B的实例注入到a中
const a = new A(b);
这个过程叫依赖注入（DI）。
那么什么是IOC Container（容器）？
在刚刚的例子中，将B的实例注入到A的构造函数中的这个过程是我们手动操作的，比较麻烦，特别是当类的关系变多变复杂时，这种方式显得很难维护。
因此IOC容器就是为了解决这样的问题，IOC容器负责管理对象的生命周期、依赖关系等，实现对象的依赖查找以及依赖注入。
比如Java的Spring以及前端@Angular框架的依赖注入器（DI）就是属于IOC容器。


1.angular 中的di
https://www.jianshu.com/p/21f3f4834418
import { Component } from '@angular/core';

@Component({
  providers:[Logger]
})
export class ComponentA { }
@component 一个装饰器，用于把某个类标记为 Angular 组件，并为它配置一些元数据，以决定该组件在运行期间该如何处理、实例化和使用。

2.inversifyJs 中的di
3.typescript 中的di https://www.jianshu.com/p/89249a3da84e
4.java 中的di
静态注入静态注入的本质是弄一个全局的大KV，key是那个Object的类，value就是new出来的所有Object。这时你编写代码的逻辑就是：创建这个大KV手工new或者通过静态方法创建第一个没有任何依赖的Object，并记录到大KV里手工new或者通过静态方法创建其他Object，如果创建时需要依赖已经创建好的Object，就从KV里取出来直接用所有的Object都创建完了，服务就可以启动了
缺点：手工创建，Object一多难于管理创建顺序

另一类被称为运行时注入，又叫做动态注入。代表是Spring和Guice。以Spring为例，你只需要定义两类信息：你要如何初始化Object（如何创建/单例、多例还是要弄个什么Factory/有没有自定义初始化代码等）你的Object依赖什么Object（可以通过class或者name来描述）其余的Spring都帮你直接搞定。使用Spring的程序一启动就开始根据当前的配置信息，classpath等各种静态 + 运行时信息帮你搞定一切。


总结
在JavaScript中依赖注入的概念不像Java中被经常提到，主要原因是在js中很容易就实现了这种动态依赖。其实我们大部分人都用过依赖注入，只是我们没有意识到。



























//微前端
https://segmentfault.com/a/1190000020192791